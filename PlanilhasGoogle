package br.ufpb.gdata.educservice;

import com.google.gdata.client.docs.DocsService;
import com.google.gdata.client.spreadsheet.SpreadsheetService;
import com.google.gdata.data.*;
import com.google.gdata.data.spreadsheet.CellEntry;
import com.google.gdata.data.spreadsheet.CellFeed;

import com.google.gdata.data.spreadsheet.SpreadsheetEntry;
import com.google.gdata.data.spreadsheet.SpreadsheetFeed;
import com.google.gdata.data.spreadsheet.WorksheetEntry;
import com.google.gdata.data.spreadsheet.WorksheetFeed;
import com.google.gdata.util.ServiceException;

import java.io.IOException;
import java.net.*;
import java.util.LinkedList;
import java.util.List;


public class PlanilhasGoogle {
	
	// Worksheet default onde ficarão as questões e as alternativas
	private String worksheetDefault = "Página1";
	
	// Váriáveis referentes ao login e senha do usuário que possui conta no gmail
	private String USERNAME = "USERNAME";
    	private String PASSWORD = "PASSWORD";
	
    
  /**
     * Método cria uma planilha no Google Drive do usuário ao qual se atribui a conta.
     * @param idExercicio
     */
    public void criarPlanilha(String idExercicio){
	   
    	try{ 

    		// Cria um novo documento no Docs
	     	DocsService service = new DocsService("MyDocumentsListIntegration-v1");
	     	
	     	// Seleciona o tipo de protocolo para este documento
			service.setProtocolVersion(DocsService.Versions.V3);
			
			// Informa as credenciais do usuário 
			service.setUserCredentials(USERNAME, PASSWORD);
			
			// Cria uma URL para o documento segundo o padrão passado por parâmetro 
			URL SPREADSHEET_FEED_URL = new URL("https://docs.google.com/feeds/default/private/full/");
			
			// Atribui o ID do exercício à variável titulo
			String titulo = idExercicio;
			
			// Instancia uma nova planilha
			com.google.gdata.data.docs.SpreadsheetEntry novaPlanilha = new com.google.gdata.data.docs.SpreadsheetEntry();
			
			// Seleciona o título dessa nova planilha
			novaPlanilha.setTitle(new PlainTextConstruct(titulo));
			
			// Atribui ou vincula a URL à planilha criada
			service.insert(SPREADSHEET_FEED_URL, novaPlanilha);
			
		} catch (Exception e){
			e.printStackTrace();
		}
    }
    
    /**
     * Este método retorna um link da planilha cujo título foi passado por parâmetro
     * @param titulo
     * @return
     */
    public String buscaLinkPeloTitulo(String titulo){
    	
    	try{
    		// Autoriza o serviço para um usuário específico
    		SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");

    		// Passa as credenciais do usuário
    	    service.setUserCredentials(USERNAME, PASSWORD);
    		
    	    // Define a URL de requisição (esse padrão nunca muda)
    	    URL SPREADSHEET_FEED_URL = new URL("https://spreadsheets.google.com/feeds/spreadsheets/private/full");

    	    // Faz uma requisição à API e obtém todas as planilhas do usuário
    	    SpreadsheetFeed feed = service.getFeed(SPREADSHEET_FEED_URL, SpreadsheetFeed.class);
    	    
    	    // Armazena o feed de todas as planilhas criadas pelo usuário
    	    List<SpreadsheetEntry> spreadsheets = feed.getEntries();

    	    // Caso não exista planilhas deve-se ser tratado neste ponto
    	    if (spreadsheets.size() == 0) {
    	      
    	    }

    	    // Varre a lista de planilhas do usuário em busca da planilha com o titulo passado como parâmetro
    	    // Ainda falta tratar caso haja titulos iguais
    	    for(SpreadsheetEntry spreadsheet: spreadsheets){
    	    	if(spreadsheet.getTitle().getPlainText().equals(titulo)){
    	    		return spreadsheet.getSpreadsheetLink().getHref();
    	    	}    	    	
    	    }
    	    
    	} catch(Exception e){
    		e.printStackTrace();
    	}
    	
    	 return "Não há planilhas!";
    }
    
    /**
     * 
     * @param tituloPlanilha
     * @param tituloQuestao
     */
    public void addConteudoEmCelula(String tituloPlanilha, String conteudo, int linha, int coluna){
    	try{
    		
    		SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");
    		
    		service.setUserCredentials(USERNAME, PASSWORD);
    		
    		SpreadsheetEntry spreadsheet = this.buscaPlanilhaPeloTitulo(tituloPlanilha);
    		
    		WorksheetFeed worksheetFeed = service.getFeed(spreadsheet.getWorksheetFeedUrl(), WorksheetFeed.class);
    		
    		// Obtém a lista de worksheets existentes em uma planilha
    		List<WorksheetEntry> worksheets = worksheetFeed.getEntries();
    		
    		// Varre a lista de Worksheets existentes
    	    for(WorksheetEntry works: worksheets){
    	    	// Verifica se há a worksheet com o nome default ("Página1") 
    	    	if(works.getTitle().getPlainText().equals(this.worksheetDefault)){
    	    		
    	    		URL celulaFeedURL = works.getCellFeedUrl();
    	    		CellFeed celulaFeed = service.getFeed(celulaFeedURL, CellFeed.class);
    	    			    		
    	    		// Iniciliza a célula passando os parâmetros de linha, coluna e conteúdo
    	    		CellEntry cell = new CellEntry(linha, coluna, conteudo);
    	    		// Atribui o número da linha em que a celula foi criada como Id.
    	    		cell.setId(Integer.toString(linha));
    	    		// Insere a nova célula na worksheet
    	    		celulaFeed.insert(cell);
    	    		// Atualiza a worksheet, já com as novas celulas
    	    		works.update();
    	    	}
    	    }

    		
    	} catch(Exception e){
    		e.printStackTrace();
    	}	
    }
    
       
    /**
     * Este método busca a planilha pelo título
     * Consertar, pois, caso não encontre ainda retorna null
     * @param titulo
     * @return
     */
    public SpreadsheetEntry buscaPlanilhaPeloTitulo(String titulo){
    	
    	try{
    		// Autoriza o serviço para um usuário específico
    		SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");

    		// Passa as credenciais do usuário
    	    service.setUserCredentials(USERNAME, PASSWORD);
    		
    	    // Define a URL de requisição (esse padrão nunca muda)
    	    URL SPREADSHEET_FEED_URL = new URL("https://spreadsheets.google.com/feeds/spreadsheets/private/full");

    	    // Faz uma requisição à API e obtém todas as planilhas do usuário
    	    SpreadsheetFeed feed = service.getFeed(SPREADSHEET_FEED_URL, SpreadsheetFeed.class);
    	    
    	    // Armazena o feed de todas as planilhas criadas pelo usuário
    	    List<SpreadsheetEntry> spreadsheets = feed.getEntries();

    	    // Caso não exista planilhas deve-se ser tratado neste ponto
    	    if (spreadsheets.size() == 0) {
    	      
    	    }

    	    // Varre a lista de planilhas do usuário em busca da planilha com o titulo passado como parâmetro
    	    // Ainda falta tratar caso haja titulos iguais
    	    for(SpreadsheetEntry spreadsheet: spreadsheets){
    	    	if(spreadsheet.getTitle().getPlainText().equals(titulo)){
    	    		return spreadsheet;
    	    	}    	    	
    	    }
    	    
    	} catch(Exception e){
    		e.printStackTrace();
    	}
    	
    	 return null;
    }
    
    
    public String getConteudoDaCelulaPeloId(String tituloPlanilha, String idCelula) {
    	
    	try{
	    	SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");
			
			service.setUserCredentials(USERNAME, PASSWORD);
			
			SpreadsheetEntry spreadsheet = this.buscaPlanilhaPeloTitulo(tituloPlanilha);
			
			WorksheetFeed worksheetFeed = service.getFeed(spreadsheet.getWorksheetFeedUrl(), WorksheetFeed.class);
			
			// Obtém a lista de worksheets existentes em uma planilha
			List<WorksheetEntry> worksheets = worksheetFeed.getEntries();
		
		    for(WorksheetEntry works: worksheets){
		    	if(works.getTitle().getPlainText().equals(this.worksheetDefault)){
		    		URL celulaFeedURL = works.getCellFeedUrl();
		    		CellFeed celulaFeed = service.getFeed(celulaFeedURL, CellFeed.class);
		    		for(CellEntry celula: celulaFeed.getEntries()){
		    			if(celula.getId().equals(idCelula)){
		    				return celula.getCell().getInputValue();
		    			}
		    			
		    		}
		    		works.update();
		    	}
		    }

		
		} catch(Exception e){
			e.printStackTrace();
			
		}
		return "Não existe uma célula com este ID!";
    }

    
    public void removePlanilha(String tituloPlanilha){
    	try{
	    	SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");
			
			service.setUserCredentials(USERNAME, PASSWORD);
			
			SpreadsheetEntry spreadsheet = this.buscaPlanilhaPeloTitulo(tituloPlanilha);
			
			spreadsheet.delete();
			
    	} catch(Exception e){
			e.printStackTrace();
			
		}
    }
    
        
    public List<String> getConteudoCelula(String tituloPlanilha){
    	List<String> conteudos = new LinkedList<String>();
    	try{
	    	SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");
			
			service.setUserCredentials(USERNAME, PASSWORD);
			
			SpreadsheetEntry spreadsheet = this.buscaPlanilhaPeloTitulo(tituloPlanilha);
			
			WorksheetFeed worksheetFeed = service.getFeed(spreadsheet.getWorksheetFeedUrl(), WorksheetFeed.class);
			
			// Obtém a lista de worksheets existentes em uma planilha
			List<WorksheetEntry> worksheets = worksheetFeed.getEntries();
		
		    for(WorksheetEntry works: worksheets){
		    	if(works.getTitle().getPlainText().equals(this.worksheetDefault)){
		    		URL celulaFeedURL = works.getCellFeedUrl();
		    		CellFeed celulaFeed = service.getFeed(celulaFeedURL, CellFeed.class);
		    		for(CellEntry celula: celulaFeed.getEntries()){
		    			conteudos.add(celula.getCell().getInputValue());
		    			
		    		}
		    		works.update();
		    	}
		    }

		
		} catch(Exception e){
			e.printStackTrace();
			
		}
		return conteudos;
    }
	
    
    /**este método retorna a última linha preenchida da primeira coluna, a coluna referente as questões.
     *  
     * @param tituloPlanilha
     * @return
     */
    public int getUltimaLinhaPreenchidas(String tituloPlanilha, int coluna){
    	// armazena a ultima linha preenchida da coluna passada por parâmetro
    	int ultimaLinha = 0;
    	
    	try{
	    	SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");
			
			service.setUserCredentials(USERNAME, PASSWORD);
			
			SpreadsheetEntry spreadsheet = this.buscaPlanilhaPeloTitulo(tituloPlanilha);
			
			WorksheetFeed worksheetFeed = service.getFeed(spreadsheet.getWorksheetFeedUrl(), WorksheetFeed.class);
			
			// Obtém a lista de worksheets existentes em uma planilha
			List<WorksheetEntry> worksheets = worksheetFeed.getEntries();
			
			 for(WorksheetEntry works: worksheets){
			    	if(works.getTitle().getPlainText().equals(this.worksheetDefault)){
			    		
			    		
			    		URL celulaFeedURL = works.getCellFeedUrl();
			    		CellFeed celulaFeed = service.getFeed(celulaFeedURL, CellFeed.class);
			    		for(CellEntry celula: celulaFeed.getEntries()){
			    			if(celula.getCell().getCol() == coluna)
			    			ultimaLinha = celula.getCell().getRow();
			    		
			    		}    			
			    		
			    	}
			 }
			 
    	} catch(Exception e){
			e.printStackTrace();			
		}
    	return ultimaLinha;
    }		
		
        
    
    /**
     * Este método atualiza o conteúdo de uma celula.
     * @param tituloPlanilha
     * @param nomeDaWorksheet
     * @param conteudo
     * @param posicao
     */
    public void atualizarConteudoDaCelula(String tituloPlanilha, String nomeDaWorksheet,String conteudo, String posicao){
    	try{
    		
    		SpreadsheetService service = new SpreadsheetService("MySpreadsheetIntegration-v1");
    		
    		service.setUserCredentials(USERNAME, PASSWORD);
    		
    		SpreadsheetEntry spreadsheet = this.buscaPlanilhaPeloTitulo(tituloPlanilha);
    		
    		WorksheetFeed worksheetFeed = service.getFeed(spreadsheet.getWorksheetFeedUrl(), WorksheetFeed.class);
    		
    		// Obtém a lista de worksheets existentes em uma planilha
    		List<WorksheetEntry> worksheets = worksheetFeed.getEntries();
    		
    		for(WorksheetEntry works: worksheets){
    	    	if(works.getTitle().getPlainText().equals(nomeDaWorksheet)){
    	    		URL celulaFeedURL = works.getCellFeedUrl();
    	    		CellFeed celulaFeed = service.getFeed(celulaFeedURL, CellFeed.class);
    	    		for(CellEntry celula: celulaFeed.getEntries()){
    	    			if (celula.getTitle().getPlainText().equals(posicao)) {
    	    				celula.changeInputValueLocal(conteudo);
    	    				celula.update();
    	    			}
    	    		}
    	    		works.update();
    	    	}
    	    }

    		
    	} catch(Exception e){
    		e.printStackTrace();
    	}
    	
    }

    
}
